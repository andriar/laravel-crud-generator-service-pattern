<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\{{modelName}};
use App\Services\{{modelName}}Service as MS;

class {{modelName}}Controller extends Controller
{

    protected ${{modelNameSingular}}Service;

    public function __construct(MS ${{modelNameSingular}}Service)
    {
        $this->{{modelNameSingular}}Service = ${{modelNameSingular}}Service;
    }

   public function index(Request $request)
    {
        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->fetch($request);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function show($id)
    {
        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->findById($id);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function store(Request $request)
    {
        // input validation
        // $request->validate([]);

        try {
            if(!$request->role)
            {
                $request->merge([
                    'role' => 'EMPLOYEE',
                ]);
            }
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->store($request->all());
            return \response()->json(${{modelNameSingular}}, 201);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function update(Request $request, $id)
    {
        // input validation
        // $request->validate([]);

        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->update($request->all(), $id);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function delete($id)
    {
        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->delete($id);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function deletePermanent($id)
    {
        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->permanentDelete($id);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function restore($id)
    {
        try {
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->restore($id);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function withtrashed(Request $request)
    {
        try {
            $request->merge([
                'with_trashed' => true,
            ]);
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->fetch($request);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }

    public function onlytrashed(Request $request)
    {
        try {
            $request->merge([
                'only_trashed' => true,
            ]);
            ${{modelNameSingular}} = $this->{{modelNameSingular}}Service->fetch($request);
            return \response()->json(${{modelNameSingular}}, 200);
        } catch (\Throwable $th) {
            return response()->json([
                'error' => $th->getMessage(),
                'code' => 'INTERNAL_SERVER_ERROR',
            ], 500);
        }
    }
}